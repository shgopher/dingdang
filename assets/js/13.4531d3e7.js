(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{440:function(t,s,a){"use strict";a.r(s);var n=a(36),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-的基本操作"}},[t._v("git 的基本操作")]),t._v(" "),a("h2",{attrs:{id:"建立一个-git-仓库"}},[t._v("建立一个 git 仓库")]),t._v(" "),a("h3",{attrs:{id:"将一个尚未配置-git-的本地目录转化为-git-仓库"}},[t._v("将一个尚未配置 git 的本地目录转化为 git 仓库：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])]),a("p",[t._v("这个时候，会建立一个。git 的目录，注意这个时候目录下的文件并没有被追踪，你需要完成，add commit 这两个命令之后才能跟踪文件：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *.go\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" LICENSE\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat(go): add all go files"')]),t._v("\n")])])]),a("h3",{attrs:{id:"克隆现有的仓库"}},[t._v("克隆现有的仓库")]),t._v(" "),a("p",[t._v("通常来说，你会使用 "),a("code",[t._v("git clone")]),t._v(" 命令来克隆远程的服务，git clone 的时候，会将远程的全部数据下载过来放入本地的。git 中，然后从中读取最新版，生成最新的文件等待后续的开发工作。")]),t._v(" "),a("p",[t._v("注意默认情况下是克隆所有版本的文件，如果你只想克隆某个版本的文件，可以设置克隆的层级以及克隆的分支。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/shgopher/dingdang\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只克隆最新的代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --depth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" https://github.com/shgopher/dingdang\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只克隆某个分支的代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone -b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("main https://github.com/shgopher/dingdang\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只克隆main分支的最新代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --depth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" -b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("main https://github.com/shgopher/dingdang\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重命名路径名称 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/shgopher/dingdang "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dd")]),t._v(" \n")])])]),a("p",[t._v("更多用法可以使用 "),a("code",[t._v("git clone --help")]),t._v(" 去查看一下详解。")]),t._v(" "),a("h2",{attrs:{id:"记录每次更新到仓库"}},[t._v("记录每次更新到仓库")]),t._v(" "),a("p",[t._v("git 工作目录下的文件拥有两种状态，已跟踪和未跟踪，已跟踪意味着，git 对它进行了跟踪记录，在上一次的快照中有它的记录，它本身的状态可能是未修改，已修改，或者已经放入暂存区域。未跟踪的文件，不存在于上次的快照记录中，也没有放入暂存区域，如果你是克隆的某个项目，那么路径下的所有文件都处于已跟踪的状态，它们处于的状态是未修改的状态，因为 git 刚刚才检测出它们。")]),t._v(" "),a("p",[t._v("下面有一张图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/lifecycle.png",alt:""}})]),t._v(" "),a("p",[t._v("我们来解释一下：")]),t._v(" "),a("p",[t._v("最左边的 untracked 表示未被跟踪的，unmodified 表示没有修改的，modified 表示已经修改的，staged 表示放入暂存区域")]),t._v(" "),a("ul",[a("li",[t._v("我们将没有跟踪的文件，跟踪它，然后将它放入到了暂存区域，暂存区域就会在下次提交的时候提交它们，并将它们的状态改为未被修改的。")]),t._v(" "),a("li",[t._v("未被修改的文件，当我们编辑了它们以后，就会将状态改为已被修改的，然后已被修改的文件又会被放入到暂存区域改为状态是已经暂存的，然后提交以后，状态被修改为未被修改的")]),t._v(" "),a("li",[t._v("其中放入暂存区域，将状态修改为已经暂存的，命令是 "),a("code",[t._v("git add")]),t._v("，将已经暂存的提交，状态改为未被修改的，这个命令是 "),a("code",[t._v("git commit")]),t._v("，git 会自动记录文件是否修改，也就是说从 unmodified 的编辑过程，状态改为 modified 这个过程，是 git 自动记录的。")]),t._v(" "),a("li",[t._v("将未被修改的文件 remove 删除的时候，就会将这个文件的状态从未被修改的变为未被追踪的，也就是说，这个文件在删除之后，git 系统就不再跟踪这个文件了。")])]),t._v(" "),a("h3",{attrs:{id:"跟踪新的文件"}},[t._v("跟踪新的文件")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git status")]),t._v(" 去查看文件的状态。")]),t._v(" "),a("p",[t._v("显示是否含有未跟踪的文件，是否有出于暂存区域的文件，例如：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("On branch master\nYour branch is up to "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),t._v(" with "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'origin/master'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\nChanges not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git restore <file>..."')]),t._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tmodified:   go.mod\n\tmodified:   go.sum\n\tmodified:   internal/pkg/code/code.go\n\tmodified:   internal/pkg/logger/sql.go\n\tmodified:   pkg/shutdown/shutdown.go\n\tmodified:   tools/codegen/codegen.go\n")])])]),a("ul",[a("li",[t._v("第一行指出，这是一个 master 的分支")]),t._v(" "),a("li",[t._v("第二行显示，这个分支同远程服务器上对应的分支没有偏离")]),t._v(" "),a("li",[t._v("下面的内容表示，有修改的文件没有被放入暂存区域。需要使用 "),a("code",[t._v("git add")]),t._v(" 命令")])]),t._v(" "),a("p",[t._v("我们在项目中新建一个文件，"),a("code",[t._v("main.go")]),t._v(" 由于之前并不存在这个文件，之前的快照里没有它，所以它的状态就是 untracked")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Untracked files:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to include "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    test.md\n")])])]),a("p",[t._v("说明 test.md 并没有被 git 跟踪，git 并不会自动的去跟踪文件，需要手动的说明一下 git 才会跟踪这个文件，我们使用 "),a("code",[t._v("git add test.md")]),t._v(" 这个命令就可以完成跟踪")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Changes to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git restore --staged <file>..."')]),t._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tnew file:   test.md\n")])])]),a("p",[t._v("我们可以看到，使用了 "),a("code",[t._v("git add")]),t._v(" 之后，出现了 "),a("code",[t._v("new file")]),t._v(" 的说明，我们看上面的图就知道，这个文件已经被放入了暂存区域了，我们只需要再 "),a("code",[t._v("git commit")]),t._v(" 一下就可以完成跟踪这个流程了。")]),t._v(" "),a("p",[t._v("通过这个演示我们发现，跟踪文件，和修改文件都需要放入暂存区域，而放入暂存区域的这个命令都是 "),a("code",[t._v("git add")]),t._v(" 不管是跟踪未被暂存的文件还是要修改的文件都是 "),a("code",[t._v("git add")]),t._v(" 这一个命令。而从暂存区域然后提交数据到 git 中命令就是 "),a("code",[t._v("git commit")]),t._v(" 这一个命令的，"),a("code",[t._v("git commit")]),t._v(" 的命令是一个含义，但是 git add 这一个命令是干了两件事儿的，通过刚才的解释，以及上面的图就可以理解了。不仅如此 "),a("code",[t._v("git add")]),t._v(" 还能在合并冲突的时候，在修改过的文件后使用，意思是冲突文件的状态改为已经解决冲突，并提交到暂存区域，所以总结一下，git add 的意思可以理解为，"),a("strong",[t._v("将文件添加到暂存区域，也就是添加到下一次的提交中。")])]),t._v(" "),a("p",[a("code",[t._v("git add")]),t._v(" 后面跟文件或者是路径，如果是路径那么将递归的将路径下的所有文件递归的找到并且添加到暂存区域。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("意思就是将这个路径下的，以及包含所有的子路径的所有文件，都添加到暂存区域。")]),t._v(" "),a("p",[t._v("文件是可以同时出现在暂存区和已修改区域这两个状态中的，其实很好理解，比如一个文件，你 add 之后存在于暂存区域了，这个时候你又进行了一次修改，那么当你还没有 add 的时候，它就会同时出现在暂存区域和已修改中，这个时候是可以 commit 的，只不过 commit 的是第一次修改以后的数据，如果想把第二次的修改也 commit，就需要再次 add。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Changes to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git reset HEAD <file>..."')]),t._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    new file:   README\n    modified:   CONTRIBUTING.md\n\nChanges not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git checkout -- <file>..."')]),t._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    modified:   CONTRIBUTING.md\n")])])]),a("p",[t._v("我们两次 add 之后")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Changes to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git reset HEAD <file>..."')]),t._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    new file:   README\n    modified:   CONTRIBUTING.md\n")])])]),a("h3",{attrs:{id:"介绍-git-status"}},[t._v("介绍 git status")]),t._v(" "),a("p",[t._v("git status 可以输出全部的提示内容，我们使用 "),a("code",[t._v("git status --short")]),t._v(" 或者是 "),a("code",[t._v("git status -s")]),t._v(" 就可以输出简单的提示内容：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("M lib/git.rb\nMM README.md\n M go.mod\n M go.sum\n M internal/pkg/code/code.go\n M internal/pkg/logger/sql.go\n M pkg/shutdown/shutdown.go\nA  test.md\n M tools/codegen/codegen.go\n?? LICENSE.txt\n")])])]),a("ul",[a("li",[t._v("?? ：表示未被跟踪的文件")]),t._v(" "),a("li",[t._v("A：表示从未被跟踪状态新添加到暂存区的文件")]),t._v(" "),a("li",[t._v("带有空格的 M：表示修改后的文件还没放入暂存区")]),t._v(" "),a("li",[t._v("顶头写的 M：表示已修改的文件并且放入了暂存区域")]),t._v(" "),a("li",[t._v("顶头写的 MM：表示已修改的文件并且放入了暂存区域，但是又修改了还没有 add 的时候的标记")])]),t._v(" "),a("h3",{attrs:{id:"介绍。gitignore"}},[t._v("介绍。gitignore")]),t._v(" "),a("p",[t._v("当我们想某些文件不让 git 跟踪的时候，并且也不想让它们出现在未跟踪这个目录下，而且有的时候我们会使用 "),a("code",[t._v("git add .")]),t._v(" 这种全局 add，所以使用。gitignore 这种可以忽略跟踪的命令就很有必要了。")]),t._v(" "),a("p",[t._v("在项目的根目录下新建一个。gitignore 文件，比如：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v(".idea\n*.txt\nnode_modules/\n")])])]),a("p",[t._v("以下是规则：")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("#")]),t._v(" 作为 "),a("code",[t._v(".gitignore")]),t._v(" 的注释")]),t._v(" "),a("li",[t._v("可以使用 glob 模式的正则表达式 (shell 使用的简化过的正则)\n"),a("ul",[a("li",[a("code",[t._v("*")]),t._v(" 匹配 0 个或者多个任意的字符")]),t._v(" "),a("li",[a("code",[t._v("[abc]")]),t._v(" 匹配任何"),a("strong",[t._v("一个")]),t._v("列在括号里的字符")]),t._v(" "),a("li",[a("code",[t._v("?")]),t._v(" 只匹配一个任意字符")]),t._v(" "),a("li",[a("code",[t._v("[0-9]")]),t._v(" 方括号中的短线表示范围")]),t._v(" "),a("li",[a("code",[t._v("**")]),t._v(" 两个星号表示匹配任意中间目录，"),a("code",[t._v("a/**/z")]),t._v(" 匹配 "),a("code",[t._v("a/z")]),t._v(" "),a("code",[t._v("a/n/d/z")])])])]),t._v(" "),a("li",[t._v("以 "),a("code",[t._v("/")]),t._v(" 开头防止递归，比如 "),a("code",[t._v("/file")]),t._v(" 表示只忽略当前目录下的 file 文件，而不会向下递归，忽略 "),a("code",[t._v("/a/file")])]),t._v(" "),a("li",[t._v("以 "),a("code",[t._v("/")]),t._v(" 结尾，表示目录，而不是目录+文件")]),t._v(" "),a("li",[a("code",[t._v("!")]),t._v(" 表示取反，比如 "),a("code",[t._v("!name/")]),t._v(" 表示除了 name 之外的目录都要忽略")])]),t._v(" "),a("p",[t._v("下面给出一个具体的例子")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示忽略url除了目录之外的所有文件")]),t._v("\nurl\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("url/\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略所有的 .a 文件")]),t._v("\n*.a\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO")]),t._v("\n/TODO\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例如 abc.a u.c bdde.b")]),t._v("\n*."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略的是nodemodules以及下面的多级内容，简而言之，如果只是某个文件叫做nodemodules就不会忽略，必须满足nodemodules加上多级的子目录才会被匹配上")]),t._v("\nnodemodules/**\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 url1 所有")]),t._v("\nurl1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 仅仅忽略 url 文件")]),t._v("\nurl1\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("url1/\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 url1  这个目录（当然包含了这个目录的所有内容也被忽略了）")]),t._v("\nurl1/\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt")]),t._v("\ndoc/*.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件")]),t._v("\ndoc/**/*.pdf\n")])])]),a("p",[t._v("GitHub 上有一个推荐使用的"),a("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("。gitignore"),a("OutboundLink")],1),t._v(" 可以看一下")]),t._v(" "),a("p",[t._v("比如 go 的：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you prefer the allow list template instead of the deny list, see community template:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Binaries for programs and plugins")]),t._v("\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Test binary, built with `go test -c`")]),t._v("\n*.test\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Output of the go coverage tool, specifically when used with LiteIDE")]),t._v("\n*.out\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Dependency directories (remove the comment below to include it)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# vendor/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Go workspace file")]),t._v("\ngo.work\n")])])]),a("p",[t._v("。gitignore 在一个项目中也是可以有很多个的，根目录有一个，在各个子目录下也可以有，子目录下的优先级更高。")]),t._v(" "),a("h3",{attrs:{id:"查看已暂存和未暂存的修改"}},[t._v("查看已暂存和未暂存的修改")]),t._v(" "),a("p",[t._v("我们使用 git status 可以查看目前的状态，但是内容过于简洁，比如只能看某个文件是什么状态，位于未追踪的状态，已经修改但是并未提交的暂存区的状态，将要提交的状态等，只能看到文件的状态，如果要看到更加详细的状态，我们可以使用 git diff")]),t._v(" "),a("p",[t._v("git diff 这个命令比较的是工作目录当前文件和暂存区域快照之间的差异，也就是说，修改了的和暂存区的差别，"),a("strong",[t._v("从命令上来说就是 git add 之前和之后的差异。")])]),t._v(" "),a("p",[t._v("如果要看的差异是已暂存和已提交的差异，那么可以使用 "),a("code",[t._v("git diff --staged")]),t._v(" 这个命令比较的就是 "),a("code",[t._v("git commit")]),t._v(" 前后的差异")]),t._v(" "),a("p",[t._v("这里推荐一些工作来查看 git diff，毕竟工具更加直观，比如使用 vs code 这个编辑器，就可以直接显示 git diff，非常的直观。")]),t._v(" "),a("h3",{attrs:{id:"提交更新"}},[t._v("提交更新")]),t._v(" "),a("p",[t._v("将暂存区域的数据提交到。git 中，使用 "),a("code",[t._v("git commit")]),t._v("，如果使用 "),a("code",[t._v('git commit -m ""')]),t._v(" 那么就会直接提交 "),a("code",[t._v("-m")]),t._v(" 后面的内容到提交记录中，如果没有 "),a("code",[t._v("-m")]),t._v(" 那么系统就会调用默认的编辑器来填写内容，我们可以使用 "),a("code",[t._v("git config --global core.editor")]),t._v(" 来设置这个编辑器，通常默认的是 vim")]),t._v(" "),a("p",[t._v("一般的提交过程会在注释里写入最后一次的 git status")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Please enter the commit message for your changes. Lines starting")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# with '#' will be ignored, and an empty message aborts the commit.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch main")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Your branch is up to date with 'origin/main'.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       modified:   README.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes not staged for commit:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       modified:   ../../README.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       modified:   README.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#       modified:   "../\\345\\237\\272\\346\\234\\254\\346\\246\\202\\345\\277\\265/README.md"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#       modified:   "../\\345\\237\\272\\346\\234\\254\\351\\205\\215\\347\\275\\256/README.md"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#       deleted:    "../\\347\\252\\201\\345\\217\\221\\347\\212\\266\\345\\206\\265\\345\\244\\204\\347\\220\\206/README.md"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#       deleted:    "../\\351\\224\\231\\350\\257\\257\\345\\244\\204\\347\\220\\206/README.md"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Untracked files:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#       "../\\345\\256\\236\\351\\231\\205\\345\\272\\224\\347\\224\\250/"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#       "../\\345\\272\\225\\345\\261\\202\\345\\216\\237\\347\\220\\206/"')]),t._v("\n\nfeat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("git"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":add some messages\n")])])]),a("p",[t._v("注释最好保留下来，最后输入信息即可")]),t._v(" "),a("p",[t._v("如果想保留的不是 git status 而是 git diff 可以这么做："),a("code",[t._v("git commit -v")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("+url\n+"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("url/\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略所有的 .a 文件")]),t._v("\n+*.a\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO")]),t._v("\n+/TODO\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例如 abc.a u.c bdde.b")]),t._v("\n+*."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略的是nodemodules以及下面的多级内容，简而言之，如果只是某个文件叫做nodemodules就不会忽略，必须满足nodemodules加上多级的子目录才会被匹配上")]),t._v("\n+nodemodules/**\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 url1 所有")]),t._v("\n+url1\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 仅仅忽略 url 文件")]),t._v("\n+url1\n+"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("url1/\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 url1  这个目录（当然包含了这个目录的所有内容也被忽略了）")]),t._v("\n+url1/\n+\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt")]),t._v("\n+doc/*.txt\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件")]),t._v("\n+doc/**/*.pdf\n+``"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("\n+GitHub上有一个推荐使用的 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(".gitignore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https://github.com/github/gitignore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 可以看一下\n+\n+比如go的：\n+"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("`"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you prefer the allow list template instead of the deny list, see community template:")]),t._v("\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore")]),t._v("\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Binaries for programs and plugins")]),t._v("\n+*.exe\n+*.exe~\n+*.dll\n+*.so\n+*.dylib\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Test binary, built with ")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("go "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" -c"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("\n+*.test\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Output of the go coverage tool, specifically when used with LiteIDE")]),t._v("\n+*.out\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Dependency directories (remove the comment below to include it)")]),t._v("\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# vendor/")]),t._v("\n+\n+"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Go workspace file")]),t._v("\n+go.work\n+"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("``\n+\n+.gitignore 在一个项目中也是可以有很多个的，根目录有一个，在各个子目录下也可以有，子目录下的优先级更高。\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 查看已暂存和未暂存的修改")]),t._v("\n+我们使用git status 可以查看目前的状态，但是内容过于简洁，比如只能看某个文件是什么状态，位于未追踪的状态，已经修改但是并未提交的暂存区的状态，将要提交的状态等，只能看到文件的状态，如果要看到更加详细的状态\n，我们可以使用 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("\n\n+git "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" 这个命令比较的是工作目录当前文件和暂存区域快照之间的差异，也就是说，修改了的和暂存区的差别，从命令上来说就是git "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" 之前和之后的差异。\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 提交更新")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 跳过暂存区域直接提交")]),t._v("\n\n\n")])])]),a("p",[t._v("可以看到非常的详细，当然日常的话使用 "),a("code",[t._v('git commit -m ""')]),t._v(" 确实挺快的，如果你觉得麻烦的话，可以使用 git cz 它是一个给 git commit 提供的工具，它提供了一个模版，可以在命令行输入信息，按照它的提示就会输出类似 "),a("code",[t._v("feat(go): add a new features")]),t._v(" 这种类型的 commit 内容，它不仅包括了 commit 头，还有 commit 内容和 commit 尾，所以这个工具是非常不错的。")]),t._v(" "),a("p",[t._v("当你提交以后会有这样的信息：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("release 463dc4f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Story "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("182")]),t._v(": Fix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": benchmarks "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" speed\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" files changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" insertions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" README\n")])])]),a("p",[t._v("它提示了位于 release 分支，本次提交的完整 sha-1 校验和是 463dc4f，本次提交的时候，多少文件是修改过的，多少行添加，多少行是删改过的。")]),t._v(" "),a("p",[t._v("提交的记录有三个事项要说明一下：")]),t._v(" "),a("ul",[a("li",[t._v("提交的是放在暂存区域的快照，")]),t._v(" "),a("li",[t._v("没有暂存的保持已修改的状态，")]),t._v(" "),a("li",[t._v("处于未修改的文件，git 会直接指向之前的快照不会对他们进行新的快照。")])]),t._v(" "),a("p",[t._v("没错提交都会对项目进行一次快照，以后可以回到这个状态。")]),t._v(" "),a("h3",{attrs:{id:"跳过暂存区域直接提交"}},[t._v("跳过暂存区域直接提交")]),t._v(" "),a("p",[t._v("就是省略了 git add 过程，git 会自动的将所有跟踪的修改过的数据暂存并且提交。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -a -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add all new benchmarks"')]),t._v("\n")])])]),a("h3",{attrs:{id:"移除文件"}},[t._v("移除文件")]),t._v(" "),a("p",[t._v("根据上面的那个图，我们得知，从 git 移除某个文件，就是从暂存区域移除，然后提交 commit，我们通过 git rm 完成这项工作，我们在工作目录中删除文件，这样这个文件就不会出现在未跟踪的清单中了。")]),t._v(" "),a("p",[t._v("如果只是手动的删除某个文件，git status 会显示 changes not staged for commit 意思就是你没有从暂存区域添加记录到 commit")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" README.md \n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" README.md\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deleted README.md"')]),t._v("\n")])])]),a("p",[t._v("当然也可以另外一种方法：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" README.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deleted README.md"')]),t._v("\n")])])]),a("p",[t._v("如果要删除位于暂存区的文件则需要加上 "),a("code",[t._v("-f")]),t._v(" 选项。")]),t._v(" "),a("p",[t._v("如果只是想摆脱 git 的追踪，但是文件还是保留在磁盘中的时候，可以使用：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" --cached README.md\n")])])]),a("p",[t._v("使用 blob 模式来删除大量文件：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" log/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("*.log\n")])])]),a("p",[t._v("这里有一个反斜杠，为了是不使用 shell 的匹配模式，直接使用 git 的匹配正则。")]),t._v(" "),a("h3",{attrs:{id:"移动文件"}},[t._v("移动文件")]),t._v(" "),a("p",[t._v("git 不会显式的跟踪文件的移动操作，git 使用 git mv 命令来移动文件，但是它的实质是")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" README.md R.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" README.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" R.md\n")])])]),a("p",[t._v("的缩写")]),t._v(" "),a("p",[t._v("git status 在这两种方法的时候都会记录为 “rename”")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Changes to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git reset HEAD <file>..."')]),t._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    renamed:    README.md -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" R.md\n")])])]),a("h2",{attrs:{id:"查看提交历史"}},[t._v("查看提交历史")]),t._v(" "),a("p",[t._v("提交了很多 commit 以后，回顾一下这个项目的提交历史，我们可以使用 git log。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/shgopher/dingdang\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" dingdang\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n\nAuthor: "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sh@gmail.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Wed Jan "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" 01:52:41 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2023")]),t._v(" +0800\n\n    feat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("git"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":descrip the  basic operate of "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\n\ncommit a8d8a2b399f041bda569f7f8ca22e2491dd324dc\nAuthor: "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sh@gmail.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Fri Dec "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" 01:34:28 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v(" +0800\n\n    fix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".vuepress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": fix a bug\n\ncommit b7a73eb8bd1cca31ef7225e6e4d2cbeb594b3710\n")])])]),a("p",[t._v("git log 默认情况下，按照时间顺序列出所有的提交，最新的在最上面，里面的内容有用户，时间，校验和以及提交的说明信息。")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git log -p -2")]),t._v(" -p 会显示每次提交所引入的差异 (git diff)，-2 表示只显示两条信息。")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git log --stat")]),t._v(" 会显示每次提交的简略性的总结")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("commit a32a8f37b5823d8b2b399f28e1746f3a20c0e692 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" main, origin/main, origin/HEAD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nAuthor: shgopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("shgopher@gmail.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Wed Jan "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" 01:52:41 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2023")]),t._v(" +0800\n\n    feat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("git"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":descrip the  basic operate of "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git/'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\345"}},[t._v("\\345")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\237"}},[t._v("\\237")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\272"}},[t._v("\\272")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\346"}},[t._v("\\346")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\234"}},[t._v("\\234")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\254"}},[t._v("\\254")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\346"}},[t._v("\\346")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\223"}},[t._v("\\223")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\215"}},[t._v("\\215")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\344"}},[t._v("\\344")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\275"}},[t._v("\\275")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\234"}},[t._v("\\234")]),t._v('/README.md"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("164")]),t._v(" ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("163")]),t._v(" insertions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" deletion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("git log --pretty")]),t._v(" 也是一个很有用的选项，它有很多的参数：")]),t._v(" "),a("ul",[a("li",[t._v("oneline 一行输出")]),t._v(" "),a("li",[t._v("short")]),t._v(" "),a("li",[t._v("full")]),t._v(" "),a("li",[t._v("fuller")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2#pretty_format",target:"_blank",rel:"noopener noreferrer"}},[t._v("format"),a("OutboundLink")],1),t._v(" 定制输出格式：例如 "),a("code",[t._v('git log --pretty=format:"%h - %an, %ar : %s"')])])]),t._v(" "),a("p",[t._v("这个命令的意思就是使用不同的格式输出 log，比如 oneline：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline -1\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在终端上显示的其实就是一行")]),t._v("\na32a8f37b5823d8b2b399f28e1746f3a20c0e692 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" main, origin/main, origin/HEAD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" feat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("git"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":descrip the  basic operate of "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("git log --graph")]),t._v(" 使用图表的方式显示 log：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%h %s"')]),t._v(" --graph\n* 2d3acf9 ignore errors from SIGCHLD on "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("trap")]),t._v("\n*  5e3ee11 Merge branch "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'master'")]),t._v(" of git://github.com/dustin/grit\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" * 420eac9 Added a method "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" getting the current branch.\n* "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 30e367c "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),t._v(" code and tests\n* "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 5a09431 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),t._v(" protection to grit\n* "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" e1193f8 support "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" heads with slashes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" them\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("/\n* d6016bc require "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" xmlschema\n*  11d191e Merge branch "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'defunkt'")]),t._v(" into "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v("\n")])])]),a("p",[t._v("git log 常用选项：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("-p 按补丁格式显示每个提交引入的差异。")])]),t._v(" "),a("li",[a("p",[t._v("--stat 显示每次提交的文件修改统计信息。")])]),t._v(" "),a("li",[a("p",[t._v("--shortstat 只显示 --stat 中最后的行数修改添加移除统计。")])]),t._v(" "),a("li",[a("p",[t._v("--name-only 仅在提交信息后显示已修改的文件清单。")])]),t._v(" "),a("li",[a("p",[t._v("--name-status 显示新增、修改、删除的文件清单。")])]),t._v(" "),a("li",[a("p",[t._v("--abbrev-commit 仅显示 SHA-1 校验和所有 40 个字符中的前几个字符。")])]),t._v(" "),a("li",[a("p",[t._v("--relative-date 使用较短的相对时间而不是完整格式显示日期 (比如 “2 weeks ago”)。")])]),t._v(" "),a("li",[a("p",[t._v("--graph 在日志旁以 ASCII 图形显示分支与合并历史。")])]),t._v(" "),a("li",[a("p",[t._v("--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline、short、full、fuller 和 format (用来定义自己的格式)。")])]),t._v(" "),a("li",[a("p",[t._v("--oneline --pretty=oneline --abbrev-commit 合用的简写。")])])]),t._v(" "),a("h3",{attrs:{id:"限制输出长度"}},[t._v("限制输出长度")]),t._v(" "),a("p",[t._v("上文我们已经看过了 "),a("code",[t._v("-2")]),t._v(" 这种 "),a("code",[t._v("-n")]),t._v(" 的限制次数的方式，接下来介绍几种常见的限制输出的方法")]),t._v(" "),a("p",[a("code",[t._v("--since")]),t._v(" "),a("code",[t._v("--until")]),t._v(" 其实就是限制的时间，比如：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --since"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(".weeks\n")])])]),a("p",[t._v("意思就是最近两周的提交，有关这两个命令更多的使用方法可以使用 man git-log 的方式查看")]),t._v(" "),a("p",[a("code",[t._v("git log --author")]),t._v(" 可以限制某个作者的提交")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --author"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("lei_lei\n\ncommit b5ff3cc5d80fad71b842edbce2c6670b1ff88111\nAuthor: lei_lei "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("96427312")]),t._v("+leilei3167@users.noreply.github.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Mon Oct "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v(" 09:44:15 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v(" +0800\n\n    fix: fix spelling error "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#58)")]),t._v("\n    \n    Replace http methods with standard library constants\n")])])]),a("p",[a("code",[t._v("git log -s")]),t._v(" 这是一个过滤器，接受一个字符串最为参数，只过滤含有这个字符串的内容")]),t._v(" "),a("p",[t._v("下面列出常见的限制选项：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("-"),a("n",[t._v(" 仅显示最近的 n 条提交。")])],1)]),t._v(" "),a("li",[a("p",[t._v("--since， --after 仅显示指定时间之后的提交，如果后面接的是一个具体的时间段，比如 --since=12.weeks 那么意思就是 12 周之内的提交。")])]),t._v(" "),a("li",[a("p",[t._v("--until， --before 仅显示指定时间之前的提交。")])]),t._v(" "),a("li",[a("p",[t._v("--author 仅显示作者匹配指定字符串的提交。")])]),t._v(" "),a("li",[a("p",[t._v("--committer 仅显示提交者匹配指定字符串的提交。")])]),t._v(" "),a("li",[a("p",[t._v("--grep 仅显示提交说明中包含指定字符串的提交。")])]),t._v(" "),a("li",[a("p",[t._v("-S 仅显示添加或删除内容匹配指定字符串的提交。")])]),t._v(" "),a("li",[a("p",[t._v("--no-merges 表示不显示合并提交的历史记录")])])]),t._v(" "),a("h2",{attrs:{id:"撤销操作"}},[t._v("撤销操作")]),t._v(" "),a("h3",{attrs:{id:"撤销操作-2"}},[t._v("撤销操作")]),t._v(" "),a("p",[t._v("第一个场景是这样的，当你 add 以后，commit 了，但是发现少 add 了，如果少 add 了，或者是说 commit 写的内容不太满意，我们可以使用 "),a("code",[t._v("git commit --amend")]),t._v(" 来追加提交，如果你并未修改内容那么修改的的只是提交的 commit 信息，这次提交的信息会覆盖上次的提交信息。")]),t._v(" "),a("p",[t._v("这个操作使用一个新的 commit 取代了老的 commit，目的是不用扰乱 commit 整个的提交历史。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat(go):add all changes"')]),t._v("\n")])])]),a("h3",{attrs:{id:"取消暂存的文件"}},[t._v("取消暂存的文件")]),t._v(" "),a("p",[t._v("我们使用 "),a("code",[t._v("git reset HEAD files")]),t._v(" 来取消暂存：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD README.md\n")])])]),a("p",[t._v("就会将位于暂存区的 README.md 文件取消掉")]),t._v(" "),a("h3",{attrs:{id:"撤销对文件的修改"}},[t._v("撤销对文件的修改")]),t._v(" "),a("p",[t._v("文件被修改了，当前的状态是已修改但是未放入暂存区域，如何还原成上次提交以后的样子，我们经常会看到这样的提示：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Changes not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git checkout -- <file>..."')]),t._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    modified:   README.md\n")])])]),a("p",[t._v("根据提示，我们要用的命令是：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- README.md\n\n")])])]),a("p",[t._v("然后我们发现修改已经撤销了，git 会用一个最近的提交去覆盖目前的修改。")]),t._v(" "),a("p",[t._v("小知识：git 中被提交的东西都是可以恢复的，但是没有提交的数据丢失以后就真的没有了。")]),t._v(" "),a("h2",{attrs:{id:"远程仓库的使用"}},[t._v("远程仓库的使用")]),t._v(" "),a("h3",{attrs:{id:"查看远程仓库的名称"}},[t._v("查看远程仓库的名称")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 我们克隆一下我们自己在GitHub上的远程服务器 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/shgopher/dingdang\n\nCloning into "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dingdang'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nremote: Reusing existing pack: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1857")]),t._v(", done.\nremote: Total "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1857")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delta "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", reused "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delta "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nReceiving objects: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1857")]),t._v("/1857"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("374.35")]),t._v(" KiB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("268.00")]),t._v(" KiB/s, done.\nResolving deltas: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("772")]),t._v("/772"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", done.\nChecking connectivity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". done.\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在本地的这个项目的目录下就可以查看远程的服务器名称")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" dingdang\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\n\norigin\n")])])]),a("p",[t._v("我们发现远程服务器的名称叫做 “origin” 这个名称也是默认的远程服务器的名称")]),t._v(" "),a("p",[t._v("我们使用选项 "),a("code",[t._v("-v")]),t._v(" 我们发现出现了下面的内容：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("origin\thttps://github.com/shgopher/iam "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin\thttps://github.com/shgopher/iam "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("你会发现 origin 就只是一个别名而已，它代表了两个 URL，一个是拉取的 URL 一个是 push 的 URL，通常这俩 URL 是一致的，不过你也可以设置成不同的样子。")]),t._v(" "),a("h3",{attrs:{id:"添加远程仓库"}},[t._v("添加远程仓库")]),t._v(" "),a("p",[t._v("使用的是 "),a("code",[t._v("git remote add 简写 url")]),t._v(" 这样的模式，比如说：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" https://github.com/shgopher/iam\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n\norigin\thttps://github.com/shgopher/iam "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin\thttps://github.com/shgopher/iam "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\thttps://github.com/shgopher/iam "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\thttps://github.com/shgopher/iam "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("我们使用 "),a("code",[t._v("git fetch sh")]),t._v(" 的方式就可以拉取数据：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 前提是在这个路径下")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\n\nremote: Counting objects: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("43")]),t._v(", done.\nremote: Compressing objects: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),t._v("/36"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", done.\nremote: Total "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("43")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delta "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", reused "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delta "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nUnpacking objects: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("43")]),t._v("/43"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", done.\nFrom https://github.com/shgopher/iam\n * "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("new branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      master     -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sh/master\n * "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("new branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      dev        -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sh/dev\n")])])]),a("h3",{attrs:{id:"从远程服务器中抓取和拉取"}},[t._v("从远程服务器中抓取和拉取")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("git fetch：从远程服务器抓取内容，但是不会自动合并。")])]),t._v(" "),a("li",[a("p",[t._v("git pull：从远程服务器抓取内容，并且自动合并到本地")])])]),t._v(" "),a("p",[t._v("当我们克隆的时候，实际上 git 还做了这样一个工作：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote origin URL\n")])])]),a("p",[t._v("系统会自动的添加远程仓库的标识，并且简写是 origin")]),t._v(" "),a("h3",{attrs:{id:"推送到远程仓库"}},[t._v("推送到远程仓库")]),t._v(" "),a("p",[t._v("我们使用 "),a("code",[t._v("git push remote branch")]),t._v(" 这样的命令去推送：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin main\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通常来说远程服务器origin可以自动省略，分支也是可以省略的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),a("h3",{attrs:{id:"查看远程仓库的详细信息"}},[t._v("查看远程仓库的详细信息")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote show origin\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote show "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\n\n remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\n  Fetch URL: https://github.com/shgopher/iam\n  Push  URL: https://github.com/shgopher/iam\n  HEAD branch: master\n  Remote branches:\n    markdown-strip                   tracked\n    book             new "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next fetch will store "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" remotes/sh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    feature/refactor new "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next fetch will store "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" remotes/sh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    master           new "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next fetch will store "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" remotes/sh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    refs/remotes/origin/issue-11     stale "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git remote prune'")]),t._v(" to remove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   Local branches configured "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git pull'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v("\n    master     merges with remote master\n  Local ref configured "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git push'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v("\n    master pushes to master "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("up to "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("这里面提示的信息有，")]),t._v(" "),a("ul",[a("li",[t._v("远程服务器的简写名称 sh")]),t._v(" "),a("li",[t._v("fetch 和 push url")]),t._v(" "),a("li",[t._v("HEAD 分支：master")]),t._v(" "),a("li",[t._v("远程分支\n"),a("ul",[a("li",[t._v("tracked 表示这个分支下载到本地被追踪中")]),t._v(" "),a("li",[t._v("stale 表示远程仓库这个分支已经弃用了。")])])]),t._v(" "),a("li",[t._v("下面还表示那个分支可以直接使用 git pull 可以自动合并这里是 master")]),t._v(" "),a("li",[t._v("以及表示自动 push 的这里也是 master")])]),t._v(" "),a("h3",{attrs:{id:"远程仓库的重命名和删除"}},[t._v("远程仓库的重命名和删除")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git remote rename origin tt")]),t._v(" 去修改远程仓库的简写 origin 为 tt")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git remote remove tt")]),t._v(" 去删除远程仓库的一个名字，比如本来有俩名称 tt 和 origin，当你删除 tt 的时候，就只剩下了 origin 了。")]),t._v(" "),a("h2",{attrs:{id:"打标签"}},[t._v("打标签")]),t._v(" "),a("p",[t._v("版本是一个很重要的标志，它代表了你的项目中的重要节点，形如："),a("code",[t._v("v1.2.1")])]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git tag")]),t._v(" 可以输出所有的版本：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\n\nv1.0.0\nv1.0.1\nv1.0.10\nv1.0.2\nv1.0.3\n\n")])])]),a("p",[t._v("如果想按照特定的模式去查找标签，可以使用 "),a("code",[t._v('git tag -l "v1.0*"')]),t._v(" 的方式去寻找")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -l "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"v1.0*"')]),t._v("\n\n\nv1.0.0\nv1.0.1\nv1.0.10\nv1.0.2\nv1.0.3\nv1.0.4\nv1.0.5\nv1.0.6\nv1.0.8\n")])])]),a("p",[t._v("属于 v1.0 家族的所有版本都会出现")]),t._v(" "),a("h3",{attrs:{id:"创建标签"}},[t._v("创建标签")]),t._v(" "),a("p",[t._v("有两种标签形式")]),t._v(" "),a("ul",[a("li",[t._v("轻量标签")]),t._v(" "),a("li",[t._v("附注标签")])]),t._v(" "),a("p",[t._v("其中轻量标签是作为临时的标签来使用的，我们通常说的标签都是值得是附注标签")]),t._v(" "),a("p",[t._v("创建附注标签：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a v1.4.0 -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version 1.4.0"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\n\nv1.4.0\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示标签详细内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show v1.4.0\n\ntag v1.4.0\nTagger: shgopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("shgopher@ee.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Sat May "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(":19:12 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2014")]),t._v(" -0700\n\nversion "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.4")]),t._v(".0\n\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: shgopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sg@mail.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Mon Mar "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(":52:11 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2008")]),t._v(" -0700\n\n    changed the version number\n")])])]),a("p",[t._v("输出了打标签的人，时间，附注的信息，提交的 commit 信息")]),t._v(" "),a("p",[t._v("创建临时的轻量标签：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag v1.4-lw\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag \n\nv1.4\nv1.4-lw\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show v1.4-lw\n\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: shgpher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s@mail.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Mon Mar "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(":52:11 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2008")]),t._v(" -0700\n\n    changed the version number\n")])])]),a("p",[t._v("临时标签不会显示标签信息，只有 commit 的信息")]),t._v(" "),a("p",[t._v("补打标签：")]),t._v(" "),a("p",[t._v("可以对过去的 commit 打标签：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git tag -a v1.3.0 某次commit的校验和或者是部分校验和")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a v1.3.0 9fc3df09\n")])])]),a("h3",{attrs:{id:"上传标签到远程仓库"}},[t._v("上传标签到远程仓库")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git push 远程服务器简写名称 tagname")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("  push origin v1.5.0\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推送多个tag，使用 git push 远程服务器简写名称 --tags")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --tags\n")])])]),a("h3",{attrs:{id:"删除标签"}},[t._v("删除标签")]),t._v(" "),a("p",[t._v("删除本地的标签：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d v1.4-lw\n\n")])])]),a("p",[t._v("从远程服务器删除标签")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git push 远程仓库名称 --delete 版本名称")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete v1.4-lw\n")])])]),a("p",[t._v("如果要修改旧版本中的某个错误，那么最好的方法是创建一个新的分支")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git checkout -b <new-branch> [<start-point>]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换分支到 bugv2 ，起点是 v2.0.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b bugv2 v2.0.0\n")])])]),a("p",[t._v("然后在这个分支提交新的版本即可，比如 v2.0.1 这个时候这个 tag 也不会跟例如 v2.1.0 这种之前的 tag 进行冲突。")]),t._v(" "),a("h2",{attrs:{id:"git-别名"}},[t._v("git 别名")]),t._v(" "),a("p",[t._v("我们要在 gitconfig 中设置 alias 选项，通过命令行是这么设置的")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.a "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.p push\n")])])]),a("p",[t._v("如果想让 git 执行外部的命令可以在外部命令前面加上 "),a("code",[t._v("!")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.gk "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'!gitk'")]),t._v("\n")])])]),a("p",[t._v("这里 gitk 就是一个外部的 git 协作工作，显然它属于外部命令，那么就需要加上一个 "),a("code",[t._v("!")]),t._v(" 就可以了。")]),t._v(" "),a("p",[t._v("通常来说设置 git 的 config 的时候不要直接更改 git 的 gitconfig 源文件，使用命令行写入更为稳妥。")])])}),[],!1,null,null,null);s.default=e.exports}}]);